{"version":3,"file":"static/js/633.5094d232.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","../node_modules/nanoid/index.browser.js","redux/contactsAndFilter/selectors.jsx","components/Form/Form.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import PropTypes from 'prop-types';\nimport css from './Section.module.css';\nimport Container from 'components/Container/Container';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div className={css.section}>\n      <Container>\n        <h2>{title}</h2>\n        {children}\n      </Container>\n    </div>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.any,\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const getContacts = state => state.contacts.contacts;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter.filter;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './Form.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsAndFilter/operations';\nimport { getContacts } from 'redux/contactsAndFilter/selectors';\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const contacts = useSelector(getContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const match = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLocaleLowerCase() ||\n        contact.number === number\n    );\n\n    if (match) {\n      alert(`${name} or ${number} is already in contacts`);\n      return;\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label} htmlFor={nameInputId}>\n        Name\n      </label>\n\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n        id={nameInputId}\n      />\n\n      <label className={css.label} htmlFor={numberInputId}>\n        Number\n      </label>\n      <input\n        className={css.input}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n        id={numberInputId}\n      />\n\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__container\":\"Filter_filter__container__yLJ5F\",\"input\":\"Filter_input__N7T3z\"};","import { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contactsAndFilter/selectors';\nimport { setFilter } from 'redux/contactsAndFilter/filterSlice';\n\nconst filterId = nanoid();\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleFilterChange = e => dispatch(setFilter(e.target.value));\n\n  return (\n    <div className={css.filter__container}>\n      <label className={css.label} htmlFor={filterId}>\n        Find contacts by name\n      </label>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={filter}\n        onChange={handleFilterChange}\n        id={filterId}\n      />\n    </div>\n  );\n};\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contact__list\":\"ContactList_contact__list__2jNwc\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact__item\":\"ContactItem_contact__item__uEsk+\",\"btn__delete\":\"ContactItem_btn__delete__oytYW\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactsAndFilter/operations';\nimport css from './ContactItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <li>\n      <div className={css.contact__item}>\n        <p>\n          {name}: {number}\n        </p>\n        <button\n          className={css.btn__delete}\n          type=\"button\"\n          onClick={() => handleDelete(id)}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default Contact;\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport Contact from 'components/ContactItem/ContactItem';\nimport { getContacts, getFilter } from 'redux/contactsAndFilter/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const normalizedFilter = filter.toLocaleLowerCase();\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <>\n      <ul className={css.contact__list}>\n        {visibleContacts.map(({ id, name, number }) => {\n          return <Contact key={id} id={id} name={name} number={number} />;\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","import Section from 'components/Section/Section';\nimport Form from 'components/Form/Form';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contactsAndFilter/operations';\nimport {\n  getContacts,\n  getError,\n  getIsLoading,\n} from 'redux/contactsAndFilter/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const contacts = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        {isLoading && <h2>Loading...</h2>}\n        {error && <h2>Opps, something went wrong: {error}</h2>}\n        {contacts.length > 0 && !error && <ContactList />}\n        {!isLoading && contacts.length === 0 && (\n          <h4>You have no contacts. Add some in the form above</h4>\n        )}\n      </Section>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"btn\":\"Form_btn__0ebGo\"};"],"names":["title","children","className","css","Container","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","getContacts","state","contacts","getIsLoading","isLoading","getError","error","getFilter","filter","Form","useState","name","setName","number","setNumber","nameInputId","numberInputId","useSelector","handleChange","e","target","value","dispatch","useDispatch","reset","onSubmit","preventDefault","find","contact","toLowerCase","toLocaleLowerCase","alert","addContact","htmlFor","type","pattern","required","onChange","filterId","setFilter","onClick","deleteContact","handleDelete","normalizedFilter","visibleContacts","includes","map","Contacts","useEffect","fetchContacts","Section","length"],"sourceRoot":""}